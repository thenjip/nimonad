checkLaw	nimonad/laws.html#checkLaw,LeftIdentitySpec[A,MA,MB],FlatMapper[MA,A,MB]	laws: checkLaw[A; MA; MB](self: LeftIdentitySpec[A, MA, MB];\n                    flatMap: FlatMapper[MA, A, MB]): Verdict[MB]	
checkLaw	nimonad/laws.html#checkLaw,RightIdentitySpec[T,M],FlatMapper[M,T,M]	laws: checkLaw[T; M](self: RightIdentitySpec[T, M]; flatMap: FlatMapper[M, T, M]): Verdict[\n    M]	
checkLaw	nimonad/laws.html#checkLaw,AssociativitySpec[A,B,MA,MB,MC],AssociativityFlatMappers[A,B,MA,MB,MC]	laws: checkLaw[A; B; MA; MB; MC](self: AssociativitySpec[A, B, MA, MB, MC];\n    flatMappers: AssociativityFlatMappers[A, B, MA, MB, MC]): Verdict[MC]	
checkLaw	nimonad/laws.html#checkLaw.t,AssociativitySpec[A,B,MA,MB,MC],	laws: checkLaw[A; B; MA; MB; MC; FMA; FA; FMB](\n    self: AssociativitySpec[A, B, MA, MB, MC];\n    flatMapper: FlatMapper[FMA, FA, FMB]{sym}): Verdict[MC]	
checkLaws	nimonad/laws.html#checkLaws,MonadLawsSpec[LA,LMA,LMB,RT,RM,AA,AB,AMA,AMB,AMC],MonadLawsFlatMappers[LA,LMA,LMB,RT,RM,AA,AB,AMA,AMB,AMC]	laws: checkLaws[LA; LMA; LMB; RT; RM; AA; AB; AMA; AMB; AMC](\n    self: MonadLawsSpec[LA, LMA, LMB, RT, RM, AA, AB, AMA, AMB, AMC];\n    flatMappers: MonadLawsFlatMappers[LA, LMA, LMB, RT, RM, AA, AB, AMA, AMB,\n                                      AMC]): MonadLawsVerdict[LMB, RM, AMC]	
checkLaws	nimonad/laws.html#checkLaws.t,MonadLawsSpec[LA,LMA,LMB,RT,RM,AA,AB,AMA,AMB,AMC],	laws: checkLaws[LA; LMA; LMB; RT; RM; AA; AB; AMA; AMB; AMC; FMA; FA; FMB](\n    self: MonadLawsSpec[LA, LMA, LMB, RT, RM, AA, AB, AMA, AMB, AMC];\n    flatMapper: FlatMapper[FMA, FA, FMB]{sym}): MonadLawsVerdict[LMB, RM, AMC]	
