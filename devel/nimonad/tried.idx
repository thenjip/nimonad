Tried	nimonad/tried.html#Tried	tried: Tried	
UnboxError	nimonad/tried.html#UnboxError	tried: UnboxError	
successType	nimonad/tried.html#successType.t,typedesc[Tried[S,F]]	tried: successType[S; F](X: typedesc[Tried[S, F]]): typedesc[S]	
failureType	nimonad/tried.html#failureType.t,typedesc[Tried[S,F]]	tried: failureType[S; F](X: typedesc[Tried[S, F]]): typedesc[F]	
successType	nimonad/tried.html#successType.t,Tried[S,F]	tried: successType[S; F](self: Tried[S, F]): typedesc[S]	
failureType	nimonad/tried.html#failureType.t,Tried[S,F]	tried: failureType[S; F](self: Tried[S, F]): typedesc[F]	
success	nimonad/tried.html#success,S,typedesc	tried: success[S](value: S; F: typedesc): Tried[S, F]	
success	nimonad/tried.html#success,S	tried: success[S; F](value: S): Tried[S, F]	
failure	nimonad/tried.html#failure,F,typedesc	tried: failure[F](value: F; S: typedesc): Tried[S, F]	
failure	nimonad/tried.html#failure,F	tried: failure[S; F](value: F): Tried[S, F]	
isSuccess	nimonad/tried.html#isSuccess,Tried[S,F]	tried: isSuccess[S; F](self: Tried[S, F]): bool	
isFailure	nimonad/tried.html#isFailure,Tried[S,F]	tried: isFailure[S; F](self: Tried[S, F]): bool	
fold	nimonad/tried.html#fold,Tried[S,F],,	tried: fold[S; F; T](self: Tried[S, F]; onSuccess: S -&gt; T; onFailure: F -&gt; T): T	
swap	nimonad/tried.html#swap,Tried[S,F]	tried: swap[S; F](self: Tried[S, F]): Tried[F, S]	
`==`	nimonad/tried.html#==,Tried[S,F],Tried[S,F]	tried: `==`[S; F](left, right: Tried[S, F]): bool	
`$`	nimonad/tried.html#$,Tried[S,F]	tried: `$`[S; F](self: Tried[S, F]): string	
map	nimonad/tried.html#map,Tried[A,F],	tried: map[A; B; F](self: Tried[A, F]; f: A -&gt; B): Tried[B, F]	
join	nimonad/tried.html#join,Tried[Tried[S,F],F]	tried: join[S; F](self: Tried[Tried[S, F], F]): Tried[S, F]	
flatMap	nimonad/tried.html#flatMap,Tried[A,F],	tried: flatMap[A; B; F](self: Tried[A, F]; f: A -&gt; Tried[B, F]): Tried[B, F]	
mapFailure	nimonad/tried.html#mapFailure,Tried[S,FA],	tried: mapFailure[S; FA; FB](self: Tried[S, FA]; f: FA -&gt; FB): Tried[S, FB]	
unboxSuccess	nimonad/tried.html#unboxSuccess,Tried[S,F]	tried: unboxSuccess[S; F](self: Tried[S, F]): S	
unboxSuccessOrRaise	nimonad/tried.html#unboxSuccessOrRaise,Tried[S,proc(Unit)]	tried: unboxSuccessOrRaise[S; E: CatchableError](self: Tried[S, proc (i0: Unit): ref E]): S	
unboxSuccessOrRaise	nimonad/tried.html#unboxSuccessOrRaise,Tried[S,ref.E]	tried: unboxSuccessOrRaise[S; E: CatchableError](self: Tried[S, ref E]): S	
unboxFailure	nimonad/tried.html#unboxFailure,Tried[S,F]	tried: unboxFailure[S; F](self: Tried[S, F]): F	
