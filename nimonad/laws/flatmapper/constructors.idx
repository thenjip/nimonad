AssociativityFlatMappers	nimonad/laws/flatmapper/constructors.html#AssociativityFlatMappers	constructors: AssociativityFlatMappers	
MonadLawsFlatMappers	nimonad/laws/flatmapper/constructors.html#MonadLawsFlatMappers	constructors: MonadLawsFlatMappers	
monadLawsFlatMappers	nimonad/laws/flatmapper/constructors.html#monadLawsFlatMappers,FlatMapper[LMA,LA,LMB],FlatMapper[RM,RT,RM],AssociativityFlatMappers[AA,AB,AMA,AMB,AMC]	constructors: monadLawsFlatMappers[LA; LMA; LMB; RT; RM; AA; AB; AMA; AMB; AMC](\n    leftIdentity: FlatMapper[LMA, LA, LMB];\n    rightIdentity: FlatMapper[RM, RT, RM];\n    associativity: AssociativityFlatMappers[AA, AB, AMA, AMB, AMC]): MonadLawsFlatMappers[\n    LA, LMA, LMB, RT, RM, AA, AB, AMA, AMB, AMC]	
associativityFlatMappers	nimonad/laws/flatmapper/constructors.html#associativityFlatMappers,FlatMapper[MA,A,MB],FlatMapper[MB,B,MC],FlatMapper[MA,A,MC]	constructors: associativityFlatMappers[A; B; MA; MB; MC](first: FlatMapper[MA, A, MB];\n    second: FlatMapper[MB, B, MC]; outer: FlatMapper[MA, A, MC]): AssociativityFlatMappers[\n    A, B, MA, MB, MC]	
instantiateAssociativity	nimonad/laws/flatmapper/constructors.html#instantiateAssociativity.m,,typed,typed,typed,typed,typed	constructors: instantiateAssociativity[IMA; IA; IMB](instance: FlatMapper[IMA, IA, IMB]{sym};\n                                       A, B, MA, MB, MC: typed): auto	
instantiateMonadLaws	nimonad/laws/flatmapper/constructors.html#instantiateMonadLaws.m,,typed,typed,typed,typed,typed,typed,typed,typed,typed,typed	constructors: instantiateMonadLaws[IMA; IA; IMB](instance: FlatMapper[IMA, IA, IMB]{sym};\n                                   LA, LMA, LMB: typed; RT, RM: typed;\n                                   AA, AB, AMA, AMB, AMC: typed): auto	
